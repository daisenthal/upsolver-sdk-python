
# Generated by Qodo Gen
from upsolver.client.exceptions import OperationalError
from upsolver.dbapi.connection import Connection #missed


# Dependencies:
# pip install pytest-mock
import pytest
from upsolver.client.exceptions import NotSupportedError
from upsolver.client.exceptions import InterfaceError

class TestConnection:

    # Successfully create connection with valid token, API URL and timeout
    def test_create_connection_success(self, mocker):
        # Arrange
        token = "test_token"
        api_url = "http://test.api"
        timeout = "60s"
    
        mock_api = mocker.patch('upsolver.dbapi.connection.RestQueryApi')
        mock_requester = mocker.patch('upsolver.dbapi.connection.Requester')
        mock_auth = mocker.patch('upsolver.dbapi.connection.TokenAuthFiller')
    
        # Act
        conn = Connection(token, api_url, timeout)
    
        # Assert
        mock_requester.assert_called_once_with(
            base_url=api_url,
            auth_filler=mock_auth.return_value
        )
        mock_auth.assert_called_once_with(token)
        mock_api.assert_called_once()
        assert not conn.closed
        assert conn._timeout == 60.0

    # Initialize with invalid token or API URL
    def test_create_connection_invalid_params(self, mocker):
        # Arrange
        token = "invalid_token" 
        api_url = "invalid_url"
        timeout = "60s"
    
        mock_requester = mocker.patch('upsolver.dbapi.connection.Requester')
        mock_requester.side_effect = Exception("API Error")
    
        # Act & Assert
        with pytest.raises(OperationalError) as exc_info:
            Connection(token, api_url, timeout)
    
        assert str(exc_info.value) == "Failed to initialize connection with Upsolver API"
        mock_requester.assert_called_once()

    def test_rollback_not_supported(self, mocker):
        # Arrange
        token = "test_token"
        api_url = "http://test.api"
        timeout = "60s"
    
        mock_api = mocker.patch('upsolver.dbapi.connection.RestQueryApi')
        mock_requester = mocker.patch('upsolver.dbapi.connection.Requester')
        mock_auth = mocker.patch('upsolver.dbapi.connection.TokenAuthFiller')
    
        conn = Connection(token, api_url, timeout)
    
        # Act & Assert
        with pytest.raises(NotSupportedError):
            conn.rollback()


    def test_commit_not_supported(self, mocker):
        # Arrange
        token = "test_token"
        api_url = "http://test.api"
        timeout = "60s"
    
        mock_api = mocker.patch('upsolver.dbapi.connection.RestQueryApi')
        mock_requester = mocker.patch('upsolver.dbapi.connection.Requester')
        mock_auth = mocker.patch('upsolver.dbapi.connection.TokenAuthFiller')
    
        conn = Connection(token, api_url, timeout)
    
        # Act & Assert
        with pytest.raises(NotSupportedError):
            conn.commit()


    def test_connection_context_manager(self, mocker):
        # Arrange
        token = "test_token"
        api_url = "http://test.api"
        timeout = "60s"
    
        mock_api = mocker.patch('upsolver.dbapi.connection.RestQueryApi')
        mock_requester = mocker.patch('upsolver.dbapi.connection.Requester')
        mock_auth = mocker.patch('upsolver.dbapi.connection.TokenAuthFiller')
    
        # Act
        with Connection(token, api_url, timeout) as conn:
            assert not conn.closed
    
        # Assert
        assert conn.closed


    def test_create_connection_invalid_timeout(self, mocker):
        # Arrange
        token = "test_token"
        api_url = "http://test.api"
        invalid_timeout = "invalid_timeout"
    
        mock_requester = mocker.patch('upsolver.dbapi.connection.Requester')
        mock_requester.return_value = mocker.Mock()
    
        # Act & Assert
        with pytest.raises(InterfaceError) as exc_info:
            Connection(token, api_url, invalid_timeout)
    
        assert str(exc_info.value) == "Timeout can't be parsed"
